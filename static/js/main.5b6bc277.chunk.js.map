{"version":3,"sources":["Components/Button/Button.tsx","Components/CheckBox.tsx","Components/AddItemForm/AddItemForm.tsx","Components/Editable Span/EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ButtonA","props","Button","size","data-filter","filter","variant","disableElevation","color","onClick","e","callback","name","CheckBox","Checkbox","onChange","setStatus","isDone","checked","AddItemForm","useState","title","setTitle","error","setError","addItem","trim","TextField","label","value","currentTarget","onKeyPress","charCode","helperText","IconButton","Add","EditableSpan","editMode","setEditMode","offEditMode","setNewTitle","autoFocus","onBlur","onDoubleClick","Todolist","removeToDoList","toDoListId","DeleteOutline","newTitle","changeToDoListTitle","addTask","List","tasks","map","t","key","id","changeStatus","removeTask","ButtonGroup","changeFilter","App","firstToDoList","v1","secondToDoList","toDoLists","setToDoList","setTasks","task","tasksNew","newTasks","toDoList","find","taskId","todoListId","className","AppBar","position","Toolbar","style","justifyContent","backgroundColor","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","newToDoListId","newToDoList","spacing","tasksForTodolist","item","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5b6bc277.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {MouseEvent} from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {FilterValuesType} from \"../../App\";\r\n\r\n\r\ntype ButtonType = {\r\n    name: string\r\n    callback: () => void\r\n    className?: string\r\n    filter?: FilterValuesType\r\n}\r\n\r\nexport const ButtonA = (props: ButtonType) => {\r\n    const onclickHandler = (e: MouseEvent<HTMLButtonElement>) => {\r\n        props.callback()\r\n    }\r\n    return (\r\n        <Button size={\"small\"}\r\n                data-filter={props.filter}\r\n                variant={\"outlined\"}\r\n                disableElevation\r\n                color={props.filter === \"all\" ? \"primary\" : \"secondary\"}\r\n                onClick={onclickHandler}>{props.name}</Button>\r\n    )\r\n}","import React from \"react\";\r\nimport {ChangeEvent} from \"react\";\r\nimport {Checkbox} from \"@material-ui/core\";\r\n\r\ntype CheckBoxType = {\r\n    isDone: boolean\r\n    setStatus: (isDone: boolean)=>void\r\n}\r\n\r\nexport const CheckBox=(props:CheckBoxType )=>{\r\n\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        props.setStatus(props.isDone)\r\n    }\r\n    return(\r\n        <Checkbox\r\n            size={\"small\"}\r\n            color={\"primary\"}\r\n            onChange={onChangeHandler}\r\n            checked={props.isDone}/>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from \"../../Todolist.module.css\";\r\nimport {ButtonA} from \"../Button/Button\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {Add} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string)=>void\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormType)=>{\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n    const addItem = () => {\r\n\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title.trim());\r\n            setTitle(\"\");\r\n        }\r\n        else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    return(\r\n            <div>\r\n                <TextField\r\n                    label={'Title'}\r\n                    variant={\"outlined\"}\r\n                    size={\"small\"}\r\n                    value={title}\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                    error={error}\r\n                    helperText={error && 'Title is required'}\r\n                />\r\n\r\n                <IconButton\r\n                    size={\"small\"}\r\n                    onClick={addItem}>\r\n                    <Add color={\"primary\"}/>\r\n                </IconButton>\r\n            </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    setNewTitle: (newTitle: string) => void\r\n}\r\n\r\n\r\nexport const EditableSpan = (props: EditableSpanType) => {\r\n    let [title, setTitle] = useState(props.title)\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n       setEditMode(false);\r\n       props.setNewTitle(title)}\r\n    const EditInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const EditModeKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n     if (e.charCode===13) {offEditMode()}\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input\r\n                onChange={EditInputHandler}\r\n                value={title}\r\n                autoFocus={true}\r\n                onBlur={offEditMode}\r\n                onKeyPress={EditModeKeyPress}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n}","import React from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {ButtonA} from \"./Components/Button/Button\";\r\nimport {CheckBox} from \"./Components/CheckBox\";\r\nimport {AddItemForm} from \"./Components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"./Components/Editable Span/EditableSpan\";\r\nimport {ButtonGroup, IconButton, List, ListItem} from \"@material-ui/core\";\r\nimport {DeleteOutline} from \"@material-ui/icons\";\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    toDoListId: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, toDoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, id: string) => void\r\n    addTask: (title: string, toDoListId: string) => void\r\n    filter: FilterValuesType\r\n    removeToDoList: (toDoListId: string) => void\r\n    setNewTitle: (taskId: string, newTitle: string, todoListId: string) => void\r\n    changeToDoListTitle: (title: string, toDoListId: string) => void\r\n    changeStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.toDoListId)\r\n    }\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.toDoListId);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.toDoListId);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.toDoListId);\r\n    const removeToDoList = () => {\r\n        props.removeToDoList(props.toDoListId)\r\n    }\r\n    const changeToDoListTitle = (newTitle: string) => {\r\n        props.changeToDoListTitle(newTitle, props.toDoListId)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <IconButton\r\n                    size ={\"small\"}\r\n                    onClick={removeToDoList}>\r\n                    <DeleteOutline/>\r\n                </IconButton>\r\n                <EditableSpan title={props.title} setNewTitle={changeToDoListTitle}/>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <List>\r\n                {props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.toDoListId)\r\n                    const setStatus = (isDone: boolean) => {\r\n                        props.changeStatus(t.id, isDone, props.toDoListId)\r\n                    }\r\n                    const setNewTitle = (newTitle: string) => {\r\n                        props.setNewTitle(t.id, newTitle, props.toDoListId)\r\n                    }\r\n                    return <li key={t.id}>\r\n                        <CheckBox isDone={t.isDone} setStatus={setStatus}/>\r\n                        <EditableSpan title={t.title} setNewTitle={setNewTitle}/>\r\n                        <IconButton\r\n                            size = {\"small\"}\r\n                            onClick={onClickHandler}>\r\n                            <DeleteOutline/>\r\n                        </IconButton>\r\n                    </li>\r\n                })\r\n                }\r\n            </List>\r\n            <div>\r\n                <ButtonGroup size={\"small\"}>\r\n                <ButtonA filter={'all'} name={\"All\"}\r\n                         callback={onAllClickHandler}/>\r\n                <ButtonA filter={'active'} name={\"Active\"}\r\n                         callback={onActiveClickHandler}/>\r\n                <ButtonA filter={'completed'} name={\"Completed\"}\r\n                         callback={onCompletedClickHandler}/>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./Components/AddItemForm/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype ToDoListsType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n\r\n    let firstToDoList = v1();\r\n    let secondToDoList = v1();\r\n\r\n    let [toDoLists, setToDoList] = useState<Array<ToDoListsType>>([\r\n        {id: firstToDoList, title: 'What to learn', filter: \"all\"},\r\n        {id: secondToDoList, title: 'What to buy', filter: \"all\"},\r\n    ])\r\n    let [tasks, setTasks] = useState({\r\n        [firstToDoList]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false}],\r\n        [secondToDoList]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Water\", isDone: false},\r\n        ]\r\n    });\r\n\r\n    function removeTask(id: string, toDoListId: string) {\r\n        let task = tasks[toDoListId].filter(t => t.id !== id);\r\n        tasks[toDoListId] = task;\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, toDoListId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        let tasksNew = tasks[toDoListId];\r\n        let newTasks = [task, ...tasksNew];\r\n        tasks[toDoListId] = newTasks;\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, id: string) {\r\n        let toDoList = toDoLists.find(t => t.id === id);\r\n        if (toDoList) {\r\n            toDoList.filter = value;\r\n            setToDoList([...toDoLists])\r\n        }\r\n    }\r\n\r\n    function changeToDoListTitle(title: string, toDoListId: string) {\r\n        let toDoList = toDoLists.find(t => t.id === toDoListId);\r\n        if (toDoList) {\r\n            toDoList.title = title;\r\n            setToDoList([...toDoLists])\r\n        }\r\n    }\r\n\r\n    function removeToDoList(toDoListId: string) {\r\n        let toDoList = toDoLists.filter(t => t.id !== toDoListId)\r\n        setToDoList(toDoList)\r\n    }\r\n\r\n    const addToDoList = (title: string) => {\r\n        let newToDoListId = v1();\r\n        let newToDoList: ToDoListsType = {\r\n            id: newToDoListId,\r\n            title: title,\r\n            filter: \"all\"\r\n        }\r\n        setToDoList([...toDoLists, newToDoList])\r\n        setTasks({...tasks, [newToDoListId]: []})\r\n    }\r\n    const setNewTitle = (taskId: string, title: string, todoListId: string) => {\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: tasks[todoListId].map(t => t.id === taskId ? {...t, title} : t)\r\n        })\r\n    }\r\n    const changeStatus = (taskId: string, isDone: boolean, todoListId: string) => {\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: tasks[todoListId].map(t => t.id === taskId ? {...t, isDone} : t)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\", backgroundColor: \"purple\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>LogOut</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addToDoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {toDoLists.map((t) => {\r\n                        let tasksForTodolist = tasks[t.id];\r\n\r\n                        if (t.filter === \"active\") {\r\n                            tasksForTodolist = tasks[t.id].filter(t => !t.isDone);\r\n                        }\r\n                        if (t.filter === \"completed\") {\r\n                            tasksForTodolist = tasks[t.id].filter(t => t.isDone);\r\n                        }\r\n\r\n                        return (<Grid item key={t.id}>\r\n                                <Paper\r\n                                    elevation={12}\r\n                                    style={{padding: \"20px\", backgroundColor: \"lightpink\"}}>\r\n                                    <Todolist\r\n                                        key={t.id}\r\n                                        toDoListId={t.id}\r\n                                        title={t.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        filter={t.filter}\r\n\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        removeToDoList={removeToDoList}\r\n                                        setNewTitle={setNewTitle}\r\n                                        changeToDoListTitle={changeToDoListTitle}\r\n                                        changeStatus={changeStatus}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}